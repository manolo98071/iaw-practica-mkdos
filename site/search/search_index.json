{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Principal"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Practica-Prestashop/","text":"Pr\u00e1ctica Prestashop: Instalaci\u00f3n de PrestaShop usando contenedores Docker y Docker Compose En esta pr\u00e1ctica tendremos que realizar la implantaci\u00f3n de un sitio PrestaShop en Amazon Web Services (AWS) haciendo uso de contenedores Docker y la herramienta Docker Compose. Requisitos de la m\u00e1quina virtual Amazon EC2. Debemos asegurarnos de que la m\u00e1quina disponga de: 2 GB de memoria RAM. Asignamos 20 GB de almacenamiento en el disco duro. Instalaci\u00f3n y configuraci\u00f3n de Docker y Docker compose En primer lugar deberemos instalar Docker, para ello ejecutamos el script docker.sh , el cu\u00e1l descarga Docker, a\u00f1ade nuestro usuario al grupo Docker, inicia el servicio Docker y lo configura para que el servicio se inicie autom\u00e1ticamente. Antes de continuar es importante actualizar el grupo de Docker, para ello deberemos abrir un terminal y ejecutar: newgrp docker Debemos de instalar en un terminal la herramienta Docker-compose, para ello ejecutamos: sudo apt install docker-compose Archivo docker-compose.yml para desplegar los servicios de PrestaShop, MySQL y phpMyAdmin. Docker-compose nos permite crear un archivo de configuracion para que mediante un comando levantemos toda la infraestructura que tenemos creada dentro del archivo docker-compose.yml. Creamos el archivo docker-compose.yml con los servicios Prestashop, MySQL, PHPMyAdmin y HTTPS-Portal (esta imagen est\u00e1 preparada para permitir que cualquier aplicaci\u00f3n web pueda ejecutarse a trav\u00e9s de HTTPS) y su configuraci\u00f3n. Para poner en marcha los servicios, ejecutamos en un terminal: docker-compose up -d Si queremos detenerlos el comando es el siguiente: docker compose down -v En el archivo .env se almacenan las variables requeridas para lanzar los servicios del archivo docker-compose.yml Comprobamos el acceso Accedemos a nuestro dominio https://iawprestashop.ddns.net y vemos que tenemos acceso a PrestaShop: Para iniciar sesi\u00f3n, accedemos a nuestro dominio/administration, donde iniciaremos sesi\u00f3n con el correo electr\u00f3nico y contrase\u00f1a definidos en las variables del archivo .env:","title":"Practica-Prestashop"},{"location":"Practica-Prestashop/#practica-prestashop-instalacion-de-prestashop-usando-contenedores-docker-y-docker-compose","text":"En esta pr\u00e1ctica tendremos que realizar la implantaci\u00f3n de un sitio PrestaShop en Amazon Web Services (AWS) haciendo uso de contenedores Docker y la herramienta Docker Compose. Requisitos de la m\u00e1quina virtual Amazon EC2. Debemos asegurarnos de que la m\u00e1quina disponga de: 2 GB de memoria RAM. Asignamos 20 GB de almacenamiento en el disco duro.","title":"Pr\u00e1ctica Prestashop: Instalaci\u00f3n de PrestaShop usando contenedores Docker y Docker Compose"},{"location":"Practica-Prestashop/#instalacion-y-configuracion-de-docker-y-docker-compose","text":"En primer lugar deberemos instalar Docker, para ello ejecutamos el script docker.sh , el cu\u00e1l descarga Docker, a\u00f1ade nuestro usuario al grupo Docker, inicia el servicio Docker y lo configura para que el servicio se inicie autom\u00e1ticamente. Antes de continuar es importante actualizar el grupo de Docker, para ello deberemos abrir un terminal y ejecutar: newgrp docker Debemos de instalar en un terminal la herramienta Docker-compose, para ello ejecutamos: sudo apt install docker-compose","title":"Instalaci\u00f3n y configuraci\u00f3n de Docker y Docker compose"},{"location":"Practica-Prestashop/#archivo-docker-composeyml-para-desplegar-los-servicios-de-prestashop-mysql-y-phpmyadmin","text":"Docker-compose nos permite crear un archivo de configuracion para que mediante un comando levantemos toda la infraestructura que tenemos creada dentro del archivo docker-compose.yml. Creamos el archivo docker-compose.yml con los servicios Prestashop, MySQL, PHPMyAdmin y HTTPS-Portal (esta imagen est\u00e1 preparada para permitir que cualquier aplicaci\u00f3n web pueda ejecutarse a trav\u00e9s de HTTPS) y su configuraci\u00f3n. Para poner en marcha los servicios, ejecutamos en un terminal: docker-compose up -d Si queremos detenerlos el comando es el siguiente: docker compose down -v En el archivo .env se almacenan las variables requeridas para lanzar los servicios del archivo docker-compose.yml","title":"Archivo docker-compose.yml para desplegar los servicios de PrestaShop, MySQL y phpMyAdmin."},{"location":"Practica-Prestashop/#comprobamos-el-acceso","text":"Accedemos a nuestro dominio https://iawprestashop.ddns.net y vemos que tenemos acceso a PrestaShop: Para iniciar sesi\u00f3n, accedemos a nuestro dominio/administration, donde iniciaremos sesi\u00f3n con el correo electr\u00f3nico y contrase\u00f1a definidos en las variables del archivo .env:","title":"Comprobamos el acceso"},{"location":"Practica15/","text":"Pr\u00e1ctica 15 : Instalaci\u00f3n de WordPress usando contenedores Docker y Docker Compose. En esta pr\u00e1ctica tendremos que realizar la implantaci\u00f3n de un sitio WordPress en Amazon Web Services (AWS) haciendo uso de contenedores Docker y la herramienta Docker Compose. Instalaci\u00f3n y configuraci\u00f3n de Docker y Docker compose En primer lugar deberemos instalar Docker, para ello ejecutamos el script docker.sh, el cu\u00e1l descarga Docker, a\u00f1ade nuestro usuario al grupo Docker, inicia el servicio Docker y lo configura para que el servicio se inicie autom\u00e1ticamente. Antes de continuar es importante actualizar el grupo de Docker, para ello deberemos abrir un terminal y ejecutar: newgrp docker Debemos de instalar en un terminal la herramienta Docker-compose, para ello ejecutamos: sudo apt install docker-compose Archivo docker-compose.yml para desplegar los servicios de WordPress, MySQL y phpMyAdmin Docker-compose nos permite crear un archivo de configuracion para que mediante un comando levantemos toda la infraestructura que tenemos creada dentro del archivo docker-compose.yml. Creamos el archivo docker-compose.yml con los servicios Wordpress, MySQL, PHPMyAdmin y HTTPS-Portal (esta imagen est\u00e1 preparada para permitir que cualquier aplicaci\u00f3n web pueda ejecutarse a trav\u00e9s de HTTPS) y su configuraci\u00f3n. Para poner en marcha los servicios, ejecutamos en un terminal: docker-compose up -d Si queremos detenerlos el comando es el siguiente: docker compose down -v En el archivo .env se almacenan las variables requeridas para lanzar los servicios del archivo docker-compose.yml Comprobamos el acceso Accedemos a nuestro dominio iawpractica15.ddns.net y nos encontramos con la instalaci\u00f3n de Wordpress:","title":"Practica15"},{"location":"Practica15/#practica-15-instalacion-de-wordpress-usando-contenedores-docker-y-docker-compose","text":"En esta pr\u00e1ctica tendremos que realizar la implantaci\u00f3n de un sitio WordPress en Amazon Web Services (AWS) haciendo uso de contenedores Docker y la herramienta Docker Compose.","title":"Pr\u00e1ctica 15: Instalaci\u00f3n de WordPress usando contenedores Docker y Docker Compose."},{"location":"Practica15/#instalacion-y-configuracion-de-docker-y-docker-compose","text":"En primer lugar deberemos instalar Docker, para ello ejecutamos el script docker.sh, el cu\u00e1l descarga Docker, a\u00f1ade nuestro usuario al grupo Docker, inicia el servicio Docker y lo configura para que el servicio se inicie autom\u00e1ticamente. Antes de continuar es importante actualizar el grupo de Docker, para ello deberemos abrir un terminal y ejecutar: newgrp docker Debemos de instalar en un terminal la herramienta Docker-compose, para ello ejecutamos: sudo apt install docker-compose","title":"Instalaci\u00f3n y configuraci\u00f3n de Docker y Docker compose"},{"location":"Practica15/#archivo-docker-composeyml-para-desplegar-los-servicios-de-wordpress-mysql-y-phpmyadmin","text":"Docker-compose nos permite crear un archivo de configuracion para que mediante un comando levantemos toda la infraestructura que tenemos creada dentro del archivo docker-compose.yml. Creamos el archivo docker-compose.yml con los servicios Wordpress, MySQL, PHPMyAdmin y HTTPS-Portal (esta imagen est\u00e1 preparada para permitir que cualquier aplicaci\u00f3n web pueda ejecutarse a trav\u00e9s de HTTPS) y su configuraci\u00f3n. Para poner en marcha los servicios, ejecutamos en un terminal: docker-compose up -d Si queremos detenerlos el comando es el siguiente: docker compose down -v En el archivo .env se almacenan las variables requeridas para lanzar los servicios del archivo docker-compose.yml","title":"Archivo docker-compose.yml para desplegar los servicios de WordPress, MySQL y phpMyAdmin"},{"location":"Practica15/#comprobamos-el-acceso","text":"Accedemos a nuestro dominio iawpractica15.ddns.net y nos encontramos con la instalaci\u00f3n de Wordpress:","title":"Comprobamos el acceso"}]}